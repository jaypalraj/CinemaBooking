// <auto-generated />
using System;
using CinemaBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaBooking.Data.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20190523193729_ScreensSeats")]
    partial class ScreensSeats
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CinemaBooking.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.MovieGenre", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("GenreId");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.MovieShowTime", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("ShowTimeId");

                    b.HasKey("MovieId", "ShowTimeId");

                    b.HasIndex("ShowTimeId");

                    b.ToTable("MovieShowTime");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.Screen", b =>
                {
                    b.Property<int>("ScreenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("ScreenId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScreenId");

                    b.Property<string>("Title");

                    b.HasKey("SeatId");

                    b.HasIndex("ScreenId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.ShowTime", b =>
                {
                    b.Property<int>("ShowTimeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScreenId");

                    b.Property<DateTime>("ShowDateTime");

                    b.HasKey("ShowTimeId");

                    b.HasIndex("ScreenId");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.MovieGenre", b =>
                {
                    b.HasOne("CinemaBooking.Domain.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CinemaBooking.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.MovieShowTime", b =>
                {
                    b.HasOne("CinemaBooking.Domain.Entities.Movie", "Movie")
                        .WithMany("MovieShowTimes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CinemaBooking.Domain.Entities.ShowTime", "ShowTime")
                        .WithMany("MovieShowTimes")
                        .HasForeignKey("ShowTimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.Seat", b =>
                {
                    b.HasOne("CinemaBooking.Domain.Entities.Screen", "Screen")
                        .WithMany("Seats")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CinemaBooking.Domain.Entities.ShowTime", b =>
                {
                    b.HasOne("CinemaBooking.Domain.Entities.Screen", "Screen")
                        .WithMany("ShowTimes")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
